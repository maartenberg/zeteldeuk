import datetime
import json
import logging
import os
import socket
from pathlib import Path

from typing import Dict, Any, List


def get_environment(
    component: str, var_files: List[Path], overrides: Dict[str, Any]
) -> Dict[str, Any]:
    """Load relevant JSON files to construct an environment suitable for rendering."""

    # Base
    result: Dict[str, Any] = {"env": os.environ, "hostname": socket.gethostname()}

    # Load JSON files
    zd_dir = Path(__file__).parent.parent.parent
    general_name = "vars.json"
    hostvar_name = f"vars-{socket.gethostname()}.json"

    root_vars: Path = zd_dir / general_name
    host_vars: Path = zd_dir / hostvar_name
    comp_vars: Path = zd_dir / component / general_name
    comp_host: Path = zd_dir / component / hostvar_name

    files = [root_vars, host_vars, comp_vars, comp_host, *var_files]

    for path in files:
        if path.is_file():
            logging.debug("Loading %s", path)
            try:
                with open(path, "r") as varfile:
                    data = json.load(varfile)

                merge_dicts(result, data)

            except FileNotFoundError as ex:
                logging.error("Couldn't open file:")
                logging.exception(ex)

            except json.JSONDecodeError as ex:
                logging.error("Could not parse file %s", path)
                logging.exception(ex)
        else:
            logging.debug("File doesn't exist: %s", path)

    # Apply overrides
    result.update(overrides)
    return result


def merge_dicts(a: Dict, b: dict) -> Dict:
    """Merge two dictionaries in-place."""
    for k, v in b.items():
        if isinstance(v, dict) and k in a:
            logging.debug("Merging %s", k)
            merge_dicts(a[k], v)
        else:
            logging.debug("Overriding %s = %s", k, v)
            a[k] = b[k]

    return a


other: Dict[str, Any] = {
    "ord": ord,
    "chr": chr,
    "zeteldeuk_managed": f"Generated by zeteldeuk on {datetime.datetime.now().isoformat()}.",
}
"""Static functions that don't need further processing."""
